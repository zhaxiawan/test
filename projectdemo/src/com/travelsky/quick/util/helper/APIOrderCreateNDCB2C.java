package com.travelsky.quick.util.helper;import java.math.BigDecimal;import java.math.BigInteger;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import java.util.Map.Entry;import org.apache.xmlbeans.XmlObject;import org.iata.iata.edist.BookingReferenceType;import org.iata.iata.edist.ContactsDocument.Contacts;import org.iata.iata.edist.ContactsDocument.Contacts.Contact;import org.iata.iata.edist.CurrencyAmountOptType;import org.iata.iata.edist.DataListType;import org.iata.iata.edist.DataListType.FlightList;import org.iata.iata.edist.DataListType.FlightSegmentList;import org.iata.iata.edist.DataListType.OriginDestinationList;import org.iata.iata.edist.DepartureDocument.Departure;import org.iata.iata.edist.ErrorType;import org.iata.iata.edist.FlightArrivalType;import org.iata.iata.edist.FlightNumberDocument.FlightNumber;import org.iata.iata.edist.FlightType.Flight;import org.iata.iata.edist.ItemIDType;import org.iata.iata.edist.ListOfFlightSegmentType;import org.iata.iata.edist.ListOfServiceBundleType;import org.iata.iata.edist.ListOfServiceBundleType.ServiceBundle;import org.iata.iata.edist.MarketingCarrierFlightType;import org.iata.iata.edist.OrderCreateRQDocument;import org.iata.iata.edist.OrderCreateRQDocument.OrderCreateRQ.Query;import org.iata.iata.edist.OrderIDType;import org.iata.iata.edist.OrderItemCoreType.OrderItem;import org.iata.iata.edist.OrderViewRSDocument;import org.iata.iata.edist.OrderViewRSDocument.OrderViewRS;import org.iata.iata.edist.OrderViewRSDocument.OrderViewRS.Response;import org.iata.iata.edist.OrderViewRSDocument.OrderViewRS.Response.Order;import org.iata.iata.edist.OrderViewRSDocument.OrderViewRS.Response.Order.OrderItems;import org.iata.iata.edist.OrderViewRSDocument.OrderViewRS.Response.Passengers;import org.iata.iata.edist.OriginDestinationDocument.OriginDestination;import org.iata.iata.edist.OtherContactMethodType;import org.iata.iata.edist.PassengerDocument.Passenger;import org.iata.iata.edist.PassengerSummaryType.PassengerIDInfo.FOID;import org.iata.iata.edist.PassengerSummaryType.PassengerIDInfo.PassengerDocument;import org.iata.iata.edist.SeatItemDocument.SeatItem;import org.iata.iata.edist.SeatLocationType;import org.iata.iata.edist.ServiceDetailType;import org.iata.iata.edist.ServiceListDocument.ServiceList;import org.iata.iata.edist.ShoppingResponseOrderType.Offers;import org.iata.iata.edist.ShoppingResponseOrderType.Offers.Offer;import org.iata.iata.edist.ShoppingResponseOrderType.Offers.Offer.OfferItems.OfferItem;import org.iata.iata.edist.TravelerCoreType.Age.BirthDate;import org.iata.iata.edist.TravelerCoreType.CitizenshipCountryCode;import org.iata.iata.edist.TravelerCoreType.PTC;import org.iata.iata.edist.TravelerSummaryType.Name;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.context.annotation.Lazy;import org.springframework.util.StringUtils;import com.cares.sh.comm.JsonUnit;import com.cares.sh.comm.SelvetContext;import com.cares.sh.constant.RedisNamespaceEnum;import com.cares.sh.parm.CommandData;import com.cares.sh.parm.CommandRet;import com.cares.sh.parm.Row;import com.cares.sh.parm.Table;import com.cares.sh.redis.RedisManager;import com.travelsky.quick.common.ApiContext;import com.travelsky.quick.common.ApiServletHolder;import com.travelsky.quick.common.ErrCodeConstants;import com.travelsky.quick.exception.APIException;import com.travelsky.quick.util.DateUtils;import com.travelsky.quick.util.StatusUtil;@Lazypublic class APIOrderCreateNDCB2C {	private static final Logger LOGGER = LoggerFactory.getLogger(APIOrderCreateNDCB2C.class);	private String language = ApiServletHolder.getApiContext().getLanguage();	//（男Male/女Female）	private static final String MALE = "Male";	/*private static final String FEMALE = "Female";*/	//联系人信息	private Map<String,String> contactsMap =new HashMap<String,String>();	private static final String LASTNAME = "lastname";	private static final String FIRSTNAME = "firstname";	private static final String AREACODE = "areacode";	private static final String CONTACTPREFIX = "contactprefix";	private static final String TELEPHONE = "telephone";	private static final String EMAIL = "email";	private static final String SEG ="SEG";	private static final String FLT ="FLT";	private static final String CONTACT="CONTACT";	private static final String ONE = "1";	private String  PNR ="";	private String  CARRICD ="";	public void doServletB2C(SelvetContext<ApiContext> context) throws Exception {		try {			// 转换 xml-->Reqbean			transInputXmlToRequestBean(context);		} catch (APIException e) {			throw e;		} catch (Exception e) {			LOGGER.error(TipMessager.getInfoMessage(					ErrCodeConstants.API_UNKNOW_SHOPPING, ApiServletHolder							.getApiContext().getLanguage()), e);			throw e;		}	}				public void transInputXmlToRequestBean(SelvetContext<ApiContext> context) throws APIException, Exception {		CommandData paxInfoCheckData = new CommandData();		String paxInfoTemplate = RedisManager.getManager().get(RedisNamespaceEnum.api_cache_paxInfotemplate.code());		JsonUnit.fromJson(paxInfoCheckData, paxInfoTemplate);		String xmlInput = context.getContext().getReqXML();		CommandData input = context.getInput();		OrderCreateRQDocument rootDoc = null;		rootDoc = OrderCreateRQDocument.Factory.parse(xmlInput);		OrderCreateRQDocument.OrderCreateRQ reqDoc = rootDoc.getOrderCreateRQ();		// 部门ID		String deptno = ApiServletHolder.getApiContext().getTicketDeptid();		input.addParm("tktdeptid",deptno);		//会员id		input.addParm("memberid", context.getContext().getUserID());		// Query		Query query = reqDoc.getQuery();		/*		 * 遍历产品信息,创建各元素间的关系		 * Query->OrderItems->ShoppingResponse->Offers		 */		Offers offers = query.getOrderItems().getShoppingResponse().getOffers();		Offer[] offerArr = offers == null? null : offers.getOfferArray();		if (offerArr == null || offerArr.length < 1) {			LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_OFFERS, language));			throw APIException.getInstance(ErrCodeConstants.API_NULL_OFFERS);		}//		if(offerArr.length>=1){			//如果offerArr>1,说明是往返  (S单程 R往返程)			String routtype = offerArr.length == 1?"S":"R";			input.addParm("routtype",routtype);//		}								addFlightSegment(input, offerArr);		String flightRoute = input.getParm("flightRoute").getStringColumn();		CommandData fITTempdata =null;		//国内航班标识		if("D".equals(flightRoute)){			fITTempdata = paxInfoCheckData.getParm("DomesticFITTemp").getObjectColumn();			input.addParm("fITTempdata", fITTempdata);		//国际航班标识		}else if("I".equals(flightRoute)){			fITTempdata = paxInfoCheckData.getParm("InterFITTemp").getObjectColumn();			input.addParm("fITTempdata", fITTempdata);		}		/*		 * 旅客信息和联系人信息		 */		Passenger[] passenger = query.getPassengers().getPassengerArray();		addPaxs(input,passenger);		addContacts(input);			}		/**	 * 添加航班(航段)信息到CommandData	 * @param input	 * @param flightSegArr 航段数组	 * @param Mapping 各元素映射	 */	private void addFlightSegment(CommandData input,Offer[] offerArr)  throws APIException {		//出发地机场三字码		String oricode ="";		//目的地机场三字码		String destcode ="";		//出发日期 必填(格式yyyyMMdd)		String oridate ="";		//返程日期 (格式yyyyMMdd)		String destdate ="";		Table flightsTable = new Table(new String[]				{"airlinecd","flightno","oridate","routtype","familycode","cabin","oriDateTime","oricode","flightDay","oriDay"});		if (offerArr == null || offerArr.length < 1) {			LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_FLIGHTSEGMENT, language));			throw APIException.getInstance(ErrCodeConstants.API_NULL_FLIGHTSEGMENT);		}		//Redis缓存中航班数据关联key值，用于创建订单成功后，删除缓存中航班数据		String delRedis = "";		String flightRoute = "";		// 遍历航段		for (Offer offer : offerArr) {			Row	row = flightsTable.addRow();			String ids = offer.getOfferID().getStringValue();			String shoppingID =ids.substring(0,52);			delRedis = delRedis+","+RedisNamespaceEnum.api_cache_order.toKey(shoppingID);			String OfferID =ids.substring(52);			String OfferItemID ="";			OfferItem[] offerItemArr = offer.getOfferItems().getOfferItemArray();			if (offerItemArr == null || offerItemArr.length < 1) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_OFFERS, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_OFFERS);			}			OfferItem offerItem = offerItemArr[0];			OfferItemID = offerItem.getOfferItemID().getStringValue();			CommandRet flightsRet = new CommandRet("");			//redis获取缓存的shopping数据			String json = RedisManager.getManager().get(RedisNamespaceEnum.api_cache_order.toKey(shoppingID));			if("".equals(json)||json == null){				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_ORDER_SUBMIT_TIMEOUT, language));				throw APIException.getInstance(ErrCodeConstants.API_ORDER_SUBMIT_TIMEOUT);			}else{				JsonUnit.fromJson(flightsRet,json);			}			CommandData flightRet = flightsRet.getParm(ids).getObjectColumn();			//国内国际			flightRoute = flightsRet.getParm("flightRoute").getStringColumn();			CommandData flights = flightRet.getParm(OfferID+"."+OfferItemID).getObjectColumn();			String airlinecd = flights.getParm("airlinecd").getStringColumn();			String flightno = flights.getParm("flightno").getStringColumn();			String suffix = flights.getParm("suffix").getStringColumn();			String routtype = flights.getParm("routtype").getStringColumn();			String familycode = flights.getParm("familycode").getStringColumn();			String cabin = flights.getParm("cabin").getStringColumn();			String isoCode = flights.getParm("isoCode").getStringColumn();			String flightDay = flights.getParm("flightDay").getStringColumn();			String oriTime = flights.getParm("oriTime").getStringColumn();			//币种			input.addParm("isoCode", isoCode);			if("G".equals(routtype)){				oricode = flights.getParm("oricode").getStringColumn();				destcode = flights.getParm("destcode").getStringColumn();				oridate = flights.getParm("oridate").getStringColumn();				row.addColumn("oricode", oricode);			}			//如果是回程 把出发日期放到回程日期上			if("R".equals(routtype)){				destdate= flights.getParm("oridate").getStringColumn();					row.addColumn("oricode", destcode);			}			row.addColumn("oridate", flights.getParm("oridate").getStringColumn());			row.addColumn("oriDateTime", flights.getParm("oridate").getStringColumn());			row.addColumn("oriTime", oriTime);			row.addColumn("airlinecd", airlinecd);			row.addColumn("flightno", flightno+suffix);			row.addColumn("routtype", routtype);			row.addColumn("familycode", familycode);			row.addColumn("cabin", cabin);			row.addColumn("flightDay", flightDay);			row.addColumn("oriDay", flightDay);		}		input.addParm("flightRoute", flightRoute);		if(delRedis.startsWith(",")){			delRedis = delRedis.substring(1, delRedis.length());		}		input.addParm("delRedis", delRedis);		input.addParm("oricode", oricode);		input.addParm("destcode", destcode);		input.addParm("oridate", oridate);		input.addParm("destdate", destdate);		input.addParm("flights", flightsTable);	}			/**	 * 添加旅客信息到CommandData	 * @param input	 * @param passenger	 * @throws APIException	 */	@SuppressWarnings("deprecation")	private void addPaxs(CommandData input,Passenger[] passengerArr) throws APIException{		//必填非必填模板		CommandData fITTempdata = input.getParm("fITTempdata").getObjectColumn();		if (passengerArr == null || passengerArr.length < 1) {			LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_PAXS, language));			throw APIException.getInstance(ErrCodeConstants.API_NULL_PAXS);		}		//承认已婴儿陪护信息关系		Map<String, String> guardianMap = new HashMap<String, String>();			Table paxsTable = new Table(new String[]{				"id","firstname","lastname","paxtype","birth","paxsex",	            "telephone","email","guardian","passtype","passno","issuecountry","contactprefix","areacode","docexpiry","nationality"});		for (Passenger passenger : passengerArr) {			Row paxsRow = paxsTable.addRow();			//国籍			CitizenshipCountryCode countryCode = passenger.getCitizenshipCountryCode();			String nationality = "";			if(countryCode != null ){				nationality = countryCode.getStringValue();			}			//旅客ID			String objectKey = passenger.getObjectKey();			if (!StringUtils.hasLength(objectKey)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_PAXS_ID, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_PAXS_ID);			}			paxsRow.addColumn("id", objectKey);			//旅客类型			String paxtype =passenger.getPTC().stringValue();			if (!StringUtils.hasLength(paxtype)) {			    LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_PAXS_TYPE, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_PAXS_TYPE);			}			if("ADT".equals(paxtype)){				checkADTInfo(paxsRow, paxtype, passenger, objectKey, guardianMap,fITTempdata,nationality);			}else if("CHD".equals(paxtype)){				checkCHDInfo(paxsRow, paxtype, passenger, objectKey, guardianMap,fITTempdata,nationality);			}else if("INF".equals(paxtype)){				checkINFInfo(paxsRow, paxtype, passenger, objectKey, guardianMap,fITTempdata,nationality);			}		}		input.addParm("paxs", paxsTable);	}		/**	 * 成人校验模板	 * @param paxsRow	 * @param paxtype	 * @param passenger	 * @param objectKey	 * @param guardianMap	 * @param fITTempdata	 * @throws APIException	 */	private void checkADTInfo(Row paxsRow,String paxtype,Passenger passenger,String objectKey,Map<String, String> guardianMap,CommandData fITTempdata,String nationality) throws APIException{		//成人旅客类型下的校验模板		CommandData checkTempPax = fITTempdata.getParm(paxtype).getObjectColumn();		//生日校验		String checkBirthday = checkTempPax.getParm("birthday").getStringColumn();		//证件号校验		String checkCertificateno = checkTempPax.getParm("certificateno").getStringColumn();		//性别校验		String checkSex = checkTempPax.getParm("sex").getStringColumn();		//邮箱地址校验		String checkEmailaddress = checkTempPax.getParm("emailaddress").getStringColumn();		//证件签发国和地区校验		String checkCertificate = checkTempPax.getParm("certificateissuingcountryandregion").getStringColumn();		//名校验		String checkName = checkTempPax.getParm("name").getStringColumn();		//姓校验		String checkSurname = checkTempPax.getParm("surname").getStringColumn();		//证件有效日期校验		String checkValiddateofcertificate = checkTempPax.getParm("validdateofcertificate").getStringColumn();		//国家和地区区号校验		String checkCountryandregioncode = checkTempPax.getParm("countryandregioncode").getStringColumn();		//手机号校验		String checkMobileno = checkTempPax.getParm("mobileno").getStringColumn();		//证件类型校验		String checkCertificatetype = checkTempPax.getParm("certificatetype").getStringColumn();		//联系人的校验模板		CommandData checkTempContact = fITTempdata.getParm("contact").getObjectColumn();		String checkConEmail = checkTempContact.getParm("emailaddress").getStringColumn();		String checkConName = checkTempContact.getParm("name").getStringColumn();		String checkConSurname = checkTempContact.getParm("surname").getStringColumn();		String checkConRegioncode = checkTempContact.getParm("countryandregioncode").getStringColumn();		String checkConMobileno = checkTempContact.getParm("mobileno").getStringColumn();		paxsRow.addColumn("paxtype", paxtype);		paxsRow.addColumn("nationality", nationality);		//为还未指定陪护人的婴儿，指定对应的陪护人		String guardian = passenger.getPassengerAssociation();		if(StringUtils.hasLength(guardian)){			//Key 婴儿id  value 成人id			guardianMap.put(guardian, objectKey);		}		//生日		BirthDate birthDate = passenger.getAge().getBirthDate();		Date birth;		if(ONE.equals(checkBirthday)){			if (birthDate == null || birthDate.getDateValue() == null) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_BIRTHDAY, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_BIRTHDAY);			}			birth = birthDate.getDateValue();			try {				paxsRow.addColumn("birth", DateUtils.getInstance().						formatDate(birth, "yyyyMMdd"));			}			catch (Exception e) {				LOGGER.error(TipMessager.getInfoMessage(ErrCodeConstants.API_CONVERT_BIRTHDAY, language), e);				throw APIException.getInstance(ErrCodeConstants.API_CONVERT_BIRTHDAY,e);			}		}else{			if(birthDate != null && birthDate.getDateValue() != null){				birth = birthDate.getDateValue();				try {					paxsRow.addColumn("birth", DateUtils.getInstance().							formatDate(birth, "yyyyMMdd"));				}				catch (Exception e) {					LOGGER.error(TipMessager.getInfoMessage(ErrCodeConstants.API_CONVERT_BIRTHDAY, language), e);					throw APIException.getInstance(ErrCodeConstants.API_CONVERT_BIRTHDAY,e);				}			}		}		Name nameArr =passenger.getName();		String lastName = nameArr.getSurname().getStringValue();		if(ONE.equals(checkSurname)){			if (!StringUtils.hasLength(lastName)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_SURNAME, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_SURNAME);			}		}		paxsRow.addColumn("lastname",lastName);		String firstname = nameArr.getGivenArray(0).getStringValue();		if(ONE.equals(checkName)){			if (!StringUtils.hasLength(firstname)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_GIVENNAME, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_GIVENNAME);			}		}		paxsRow.addColumn("firstname",firstname);		Contact[] contactArr = passenger.getContacts().getContactArray();		if (contactArr == null || contactArr.length < 1) {			LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_CONTACT, language));			throw APIException.getInstance(ErrCodeConstants.API_NULL_CONTACT);		}		//旅客联系信息		for(Contact contact:contactArr){			String type =contact.getContactType().getStringValue();			if(CONTACT.equalsIgnoreCase(type)){				//联系email				String email = contact.getEmailContact().getAddress().getStringValue();				if(ONE.equals(checkConEmail)){					if(!StringUtils.hasLength(email)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_USER_EMAIL, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_USER_EMAIL);					}				}				OtherContactMethodType contactMethod = contact.getOtherContactMethod();				//联系人姓				String  contacLastname = contactMethod.getName();				if(ONE.equals(checkConSurname)){					if(!StringUtils.hasLength(contacLastname)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_SURNAME, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_SURNAME);					}				}				//联系人名				String  contacFirstname = contactMethod.getValue();				if(ONE.equals(checkConName)){					if(!StringUtils.hasLength(contacFirstname)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_GIVENNAME, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_GIVENNAME);					}				}				//联系电话				String telephone = contact.getPhoneContact().getNumberArray(0).getStringValue();				if(ONE.equals(checkConMobileno)){					if(!StringUtils.hasLength(telephone)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_MOBILE, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_MOBILE);					}				}				String areacode = contact.getPhoneContact().getNumberArray(0).getAreaCode();				if(ONE.equals(checkConRegioncode)){					if(!StringUtils.hasLength(areacode)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_AREACODE, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_AREACODE);					}				}				contactsMap.put(LASTNAME, contacLastname);				contactsMap.put(FIRSTNAME, contacFirstname);				contactsMap.put(AREACODE, areacode);				contactsMap.put(TELEPHONE, telephone);				contactsMap.put(EMAIL, email);			}else{				//联系email				String email = contact.getEmailContact().getAddress().getStringValue();				if(ONE.equals(checkEmailaddress)){					if(!StringUtils.hasLength(email)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_USER_EMAIL, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_USER_EMAIL);					}				}				//联系电话				String telephone = contact.getPhoneContact().getNumberArray(0).getStringValue();				if(ONE.equals(checkMobileno)){					if(!StringUtils.hasLength(telephone)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_MOBILE, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_MOBILE);					}				}				//国家区号				String areacode = contact.getPhoneContact().getNumberArray(0).getAreaCode();				if(ONE.equals(checkCountryandregioncode)){					if(!StringUtils.hasLength(areacode)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_AREACODE, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_AREACODE);					}				}				paxsRow.addColumn("email",email);				paxsRow.addColumn("telephone",telephone);				paxsRow.addColumn("contactprefix",areacode);				paxsRow.addColumn("areacode",areacode);			}		}		//证件信息		FOID foidArr = passenger.getPassengerIDInfo().getFOID();		String passtype = foidArr.getType();		if(ONE.equals(checkCertificatetype)){			if (!StringUtils.hasLength(passtype)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_IDTYPE, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_IDTYPE);			}		}		String passno = foidArr.getID().getStringValue();		if(ONE.equals(checkCertificateno)){			if (!StringUtils.hasLength(passno)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_FOID_ID, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_FOID_ID);			}		}		paxsRow.addColumn("passtype",passtype);		paxsRow.addColumn("passno",passno);		PassengerDocument[] pdArry = passenger.getPassengerIDInfo().getPassengerDocumentArray();		if(null !=pdArry && !"".equals(pdArry) && pdArry.length>0){			String  issuecountry = pdArry[0].getID();			if(ONE.equals(checkCertificate)){				if(!StringUtils.hasLength(issuecountry)){					LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_CERTIFICATEISSUINGCOUNTRY_CODE, language));					throw APIException.getInstance(ErrCodeConstants.API_NULL_CERTIFICATEISSUINGCOUNTRY_CODE);				}				//证件签发国和地区				paxsRow.addColumn("issuecountry",issuecountry);				if(ONE.equals(checkValiddateofcertificate)){					//证件有效日期					Calendar docexpiry = pdArry[0].getDateOfExpiration();					if(docexpiry == null || "".equals(docexpiry)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_VALIDDATEOFCERTIFICATE_CODE, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_VALIDDATEOFCERTIFICATE_CODE);					}					paxsRow.addColumn("docexpiry",DateUtils.getInstance().formatDate(docexpiry, "yyyyMMdd"));				}else{					//证件有效日期					Calendar docexpiry = pdArry[0].getDateOfExpiration();					if(docexpiry != null && !"".equals(docexpiry)){						paxsRow.addColumn("docexpiry",DateUtils.getInstance().formatDate(docexpiry, "yyyyMMdd"));					}				}			}else{				//证件签发国和地区				paxsRow.addColumn("issuecountry",issuecountry);				if(ONE.equals(checkValiddateofcertificate)){					//证件有效日期					Calendar docexpiry = pdArry[0].getDateOfExpiration();					if(docexpiry == null || "".equals(docexpiry)){						LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_VALIDDATEOFCERTIFICATE_CODE, language));						throw APIException.getInstance(ErrCodeConstants.API_NULL_VALIDDATEOFCERTIFICATE_CODE);					}					paxsRow.addColumn("docexpiry",DateUtils.getInstance().formatDate(docexpiry, "yyyyMMdd"));				}else{					//证件有效日期					Calendar docexpiry = pdArry[0].getDateOfExpiration();					if(docexpiry != null && !"".equals(docexpiry)){						paxsRow.addColumn("docexpiry",DateUtils.getInstance().formatDate(docexpiry, "yyyyMMdd"));					}				}			}		}		//性别（男Male/女Female）		String paxsex = "";		if(passenger.getGender() != null){			paxsex = passenger.getGender().getStringValue();		}		if(ONE.equals(checkSex)){			if(!StringUtils.hasLength(paxsex)){				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_GENDER, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_GENDER);			}			paxsex = MALE.equals(paxsex)?"M":"F";			paxsRow.addColumn("paxsex",paxsex);		}else{			if(StringUtils.hasLength(paxsex)){				paxsex = MALE.equals(paxsex)?"M":"F";				paxsRow.addColumn("paxsex",paxsex);			}		}	}		/**	 * 儿童校验模板	 * @param paxsRow	 * @param paxtype	 * @param passenger	 * @param objectKey	 * @param guardianMap	 * @param fITTempdata	 * @throws APIException	 */	private void checkCHDInfo(Row paxsRow,String paxtype,Passenger passenger,String objectKey,Map<String, String> guardianMap,CommandData fITTempdata,String nationality) throws APIException{		//旅客为儿童类型下的校验模板		CommandData checkTempPax = fITTempdata.getParm(paxtype).getObjectColumn();		//生日校验		String checkBirthday = checkTempPax.getParm("birthday").getStringColumn();		//证件号校验		String checkCertificateno = checkTempPax.getParm("certificateno").getStringColumn();		//性别校验		String checkSex = checkTempPax.getParm("sex").getStringColumn();		//证件签发国和地区校验		String checkCertificate = checkTempPax.getParm("certificateissuingcountryandregion").getStringColumn();		//名校验		String checkName = checkTempPax.getParm("name").getStringColumn();		//姓校验		String checkSurname = checkTempPax.getParm("surname").getStringColumn();		//证件有效日期校验		String checkValiddateofcertificate = checkTempPax.getParm("validdateofcertificate").getStringColumn();		//证件类型校验		String checkCertificatetype = checkTempPax.getParm("certificatetype").getStringColumn();		paxsRow.addColumn("paxtype", paxtype);		paxsRow.addColumn("nationality", nationality);		//生日		BirthDate birthDate = passenger.getAge().getBirthDate();		Date birth;		if(ONE.equals(checkBirthday)){			if (birthDate == null || birthDate.getDateValue() == null) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_BIRTHDAY, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_BIRTHDAY);			}			birth = birthDate.getDateValue();			try {				paxsRow.addColumn("birth", DateUtils.getInstance().						formatDate(birth, "yyyyMMdd"));			}			catch (Exception e) {				LOGGER.error(TipMessager.getInfoMessage(ErrCodeConstants.API_CONVERT_BIRTHDAY, language), e);				throw APIException.getInstance(ErrCodeConstants.API_CONVERT_BIRTHDAY,e);			}		}else{			if (birthDate != null && birthDate.getDateValue() != null) {				birth = birthDate.getDateValue();				try {					paxsRow.addColumn("birth", DateUtils.getInstance().formatDate(birth, "yyyyMMdd"));				}				catch (Exception e) {					LOGGER.error(TipMessager.getInfoMessage(ErrCodeConstants.API_CONVERT_BIRTHDAY, language), e);					throw APIException.getInstance(ErrCodeConstants.API_CONVERT_BIRTHDAY,e);				}			}		}		Name nameArr =passenger.getName();		String lastName = nameArr.getSurname().getStringValue();		if(ONE.equals(checkSurname)){			if (!StringUtils.hasLength(lastName)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_SURNAME, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_SURNAME);			}		}		paxsRow.addColumn("lastname",lastName);		String firstname = nameArr.getGivenArray(0).getStringValue();		if(ONE.equals(checkName)){			if (!StringUtils.hasLength(firstname)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_GIVENNAME, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_GIVENNAME);			}		}		paxsRow.addColumn("firstname",firstname);		Contact[] contactArr = passenger.getContacts().getContactArray();		if (contactArr == null || contactArr.length < 1) {			LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_CONTACT, language));			throw APIException.getInstance(ErrCodeConstants.API_NULL_CONTACT);		}		//旅客联系信息		for(Contact contact:contactArr){			if("PASSENGER".equals(contact.getContactType().getStringValue())){				//联系email				String email = contact.getEmailContact().getAddress().getStringValue();				//联系电话				String telephone = contact.getPhoneContact().getNumberArray(0).getStringValue();				String areacode = contact.getPhoneContact().getNumberArray(0).getAreaCode();				paxsRow.addColumn("email",email);				paxsRow.addColumn("telephone",telephone);				paxsRow.addColumn("contactprefix",areacode);				paxsRow.addColumn("areacode",areacode);			}		}		//证件信息		FOID foidArr = passenger.getPassengerIDInfo().getFOID();		String passtype = foidArr.getType();		if(ONE.equals(checkCertificatetype)){			if(!StringUtils.hasLength(passtype)){				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_IDTYPE, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_IDTYPE);			}		}		String passno = foidArr.getID().getStringValue();		if(ONE.equals(checkCertificateno)){			if (!StringUtils.hasLength(passno)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_FOID_ID, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_FOID_ID);			}		}		paxsRow.addColumn("passtype",passtype);		paxsRow.addColumn("passno",passno);		PassengerDocument[]  pdArry = passenger.getPassengerIDInfo().getPassengerDocumentArray();		if(null !=pdArry && !"".equals(pdArry) && pdArry.length>0){			String  issuecountry = pdArry[0].getID();			if(ONE.equals(checkCertificate)){				if(!StringUtils.hasLength(issuecountry)){					LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_CERTIFICATEISSUINGCOUNTRY_CODE, language));					throw APIException.getInstance(ErrCodeConstants.API_NULL_CERTIFICATEISSUINGCOUNTRY_CODE);				}			}			paxsRow.addColumn("issuecountry",issuecountry);			if(ONE.equals(checkValiddateofcertificate)){				//证件有效日期				Calendar docexpiry = pdArry[0].getDateOfExpiration();				if(docexpiry == null || "".equals(docexpiry)){					LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_VALIDDATEOFCERTIFICATE_CODE, language));					throw APIException.getInstance(ErrCodeConstants.API_NULL_VALIDDATEOFCERTIFICATE_CODE);				}				paxsRow.addColumn("docexpiry",DateUtils.getInstance().formatDate(docexpiry, "yyyyMMdd"));			}else{				//证件有效日期				Calendar docexpiry = pdArry[0].getDateOfExpiration();				if(docexpiry != null && !"".equals(docexpiry)){					paxsRow.addColumn("docexpiry",DateUtils.getInstance().formatDate(docexpiry, "yyyyMMdd"));				}			}		}		//性别（男Male/女Female）		String paxsex = "";		if(passenger.getGender() != null){			paxsex = passenger.getGender().getStringValue();		}		if(ONE.equals(checkSex)){			if(!StringUtils.hasLength(paxsex)){				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_GENDER, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_GENDER);			}			paxsex = MALE.equals(paxsex)?"M":"F";			paxsRow.addColumn("paxsex",paxsex);		}else{			if(StringUtils.hasLength(paxsex)){				paxsex = MALE.equals(paxsex)?"M":"F";				paxsRow.addColumn("paxsex",paxsex);			}		}	}		/**	 * 婴儿校验模板	 * @param paxsRow	 * @param paxtype	 * @param passenger	 * @param objectKey	 * @param guardianMap	 * @param fITTempdata	 * @throws APIException	 */	private void checkINFInfo(Row paxsRow,String paxtype,Passenger passenger,String objectKey,Map<String, String> guardianMap,CommandData fITTempdata,String nationality) throws APIException{		//旅客婴儿类型下的校验模板		CommandData checkTempPax = fITTempdata.getParm(paxtype).getObjectColumn();		//生日校验		String checkBirthday = checkTempPax.getParm("birthday").getStringColumn();		//证件号校验		String checkCertificateno = checkTempPax.getParm("certificateno").getStringColumn();		//性别校验		String checkSex = checkTempPax.getParm("sex").getStringColumn();		//证件签发国和地区校验		String checkCertificate = checkTempPax.getParm("certificateissuingcountryandregion").getStringColumn();		//名校验		String checkName = checkTempPax.getParm("name").getStringColumn();		//姓校验		String checkSurname = checkTempPax.getParm("surname").getStringColumn();		//选择监护人		String checkSelGuard = checkTempPax.getParm("selectguardian").getStringColumn();		//证件有效日期校验		String checkValiddateofcertificate = checkTempPax.getParm("validdateofcertificate").getStringColumn();		//证件类型校验		String checkCertificatetype = checkTempPax.getParm("certificatetype").getStringColumn();		paxsRow.addColumn("paxtype", paxtype);		paxsRow.addColumn("nationality", nationality);		//监护人		String guardian = guardianMap.get(objectKey);		if(ONE.equals(checkSelGuard)){			if (!StringUtils.hasLength(guardian)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_PAXS_GUARDIAN, language));				throw APIException.getInstance(						ErrCodeConstants.API_NULL_PAXS_GUARDIAN);			}		}		paxsRow.addColumn("guardian", guardian);		//生日		BirthDate birthDate = passenger.getAge().getBirthDate();		Date birth;		if(ONE.equals(checkBirthday)){			if (birthDate == null || birthDate.getDateValue() == null) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_BIRTHDAY, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_BIRTHDAY);			}			birth = birthDate.getDateValue();			try {				paxsRow.addColumn("birth", DateUtils.getInstance().						formatDate(birth, "yyyyMMdd"));			}			catch (Exception e) {				LOGGER.error(TipMessager.getInfoMessage(ErrCodeConstants.API_CONVERT_BIRTHDAY, language), e);				throw APIException.getInstance(ErrCodeConstants.API_CONVERT_BIRTHDAY,e);			}		}else{			if (birthDate != null && birthDate.getDateValue() != null) {				birth = birthDate.getDateValue();				try {					paxsRow.addColumn("birth", DateUtils.getInstance().							formatDate(birth, "yyyyMMdd"));				}				catch (Exception e) {					LOGGER.error(TipMessager.getInfoMessage(ErrCodeConstants.API_CONVERT_BIRTHDAY, language), e);					throw APIException.getInstance(ErrCodeConstants.API_CONVERT_BIRTHDAY,e);				}			}		}		Name nameArr =passenger.getName();		String lastName = nameArr.getSurname().getStringValue();		if(ONE.equals(checkSurname)){			if (!StringUtils.hasLength(lastName)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_SURNAME, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_SURNAME);			}		}		paxsRow.addColumn("lastname",lastName);		String firstname = nameArr.getGivenArray(0).getStringValue();		if(ONE.equals(checkName)){			if (!StringUtils.hasLength(firstname)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_GIVENNAME, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_GIVENNAME);			}		}		paxsRow.addColumn("firstname",firstname);		Contact[] contactArr = passenger.getContacts().getContactArray();		if (contactArr == null || contactArr.length < 1) {			LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_CONTACT, language));			throw APIException.getInstance(ErrCodeConstants.API_NULL_CONTACT);		}		//旅客联系信息		for(Contact contact:contactArr){			if("PASSENGER".equals(contact.getContactType().getStringValue())){				//联系email				String email = contact.getEmailContact().getAddress().getStringValue();				//联系电话				String telephone = contact.getPhoneContact().getNumberArray(0).getStringValue();				String areacode = contact.getPhoneContact().getNumberArray(0).getAreaCode();				paxsRow.addColumn("email",email);				paxsRow.addColumn("telephone",telephone);				paxsRow.addColumn("contactprefix",areacode);				paxsRow.addColumn("areacode",areacode);			}		}		//证件信息		FOID foidArr = passenger.getPassengerIDInfo().getFOID();		String passtype = foidArr.getType();		if(ONE.equals(checkCertificatetype)){			if (!StringUtils.hasLength(passtype)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_IDTYPE, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_IDTYPE);			}		}		String passno = foidArr.getID().getStringValue();		if(ONE.equals(checkCertificateno)){			if (!StringUtils.hasLength(passno)) {				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_FOID_ID, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_FOID_ID);			}		}		paxsRow.addColumn("passtype",passtype);		paxsRow.addColumn("passno",passno);		PassengerDocument[]  pdArry = passenger.getPassengerIDInfo().getPassengerDocumentArray();		if(null !=pdArry && !"".equals(pdArry) && pdArry.length>0){			//证件签发国和地区			String  issuecountry = pdArry[0].getID();			if(ONE.equals(checkCertificate)){				if(!StringUtils.hasLength(issuecountry)){					LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_CERTIFICATEISSUINGCOUNTRY_CODE, language));					throw APIException.getInstance(ErrCodeConstants.API_NULL_CERTIFICATEISSUINGCOUNTRY_CODE);				}			}			paxsRow.addColumn("issuecountry",issuecountry);			if(ONE.equals(checkValiddateofcertificate)){				//证件有效日期				Calendar docexpiry = pdArry[0].getDateOfExpiration();				if(docexpiry == null || "".equals(docexpiry)){					LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_VALIDDATEOFCERTIFICATE_CODE, language));					throw APIException.getInstance(ErrCodeConstants.API_NULL_VALIDDATEOFCERTIFICATE_CODE);				}				paxsRow.addColumn("docexpiry",DateUtils.getInstance().formatDate(docexpiry, "yyyyMMdd"));			}else{				//证件有效日期				Calendar docexpiry = pdArry[0].getDateOfExpiration();				if(docexpiry != null && !"".equals(docexpiry)){					paxsRow.addColumn("docexpiry",DateUtils.getInstance().formatDate(docexpiry, "yyyyMMdd"));				}			}		}		//性别（男Male/女Female）		String paxsex = "";		if(passenger.getGender() != null){			paxsex = passenger.getGender().getStringValue();		}		if(ONE.equals(checkSex)){			if(!StringUtils.hasLength(paxsex)){				LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_GENDER, language));				throw APIException.getInstance(ErrCodeConstants.API_NULL_GENDER);			}			paxsex = MALE.equals(paxsex)?"M":"F";			paxsRow.addColumn("paxsex",paxsex);		}else{			if(StringUtils.hasLength(paxsex)){				paxsex = MALE.equals(paxsex)?"M":"F";				paxsRow.addColumn("paxsex",paxsex);			}		}	}		/**	 * 添加联系人信息到CommandData	 * @throws APIException 	 */	private void addContacts(CommandData input) throws APIException{		Table contactsTable = new Table(new String[]{LASTNAME,FIRSTNAME,AREACODE,CONTACTPREFIX,TELEPHONE,EMAIL});		Row contactsRow = contactsTable.addRow();		//联系人姓		String  contacName =contactsMap.get(LASTNAME);		if (!StringUtils.hasLength(contacName)) {			LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_CONTACT_NAME, language));			throw APIException.getInstance(ErrCodeConstants.API_NULL_CONTACT_NAME);		}		contactsRow.addColumn(LASTNAME,contacName);		//联系人电话		String  contacTelephone =contactsMap.get(TELEPHONE);//		if (!StringUtils.hasLength(contacTelephone)) {//			LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_CONTACT_NO, language));//			throw APIException.getInstance(ErrCodeConstants.API_NULL_CONTACT_NO);//		}		contactsRow.addColumn(TELEPHONE,contacTelephone);		//联系人邮箱		String  contacEmail =contactsMap.get(EMAIL);		contactsRow.addColumn(EMAIL,contacEmail);		String  firstname =contactsMap.get(FIRSTNAME);		contactsRow.addColumn(FIRSTNAME,firstname);		String  areacode =contactsMap.get(AREACODE);		contactsRow.addColumn(CONTACTPREFIX,areacode);		contactsRow.addColumn("areacode",areacode);//		String  contactprefix =contactsMap.get(CONTACTPREFIX);//		contactsRow.addColumn(CONTACTPREFIX,contactprefix);		input.addParm("contacts", contactsTable);	}	/********************************************************************************************************************************/		public XmlObject transResponseBeanToXmlBean(CommandRet commandRet, CommandData input) {		OrderViewRSDocument doc = OrderViewRSDocument.Factory.newInstance();		OrderViewRSDocument.OrderViewRS root = doc.addNewOrderViewRS();		Mapping mapping = new Mapping();		try {			if (processError(commandRet, root)) {				return doc;			}			root.addNewSuccess();			Response responseArry = root.addNewResponse();			/*旅客信息*****************************************/			Passengers  passengersArry= responseArry.addNewPassengers();			addPaxsXML(commandRet,passengersArry,mapping);			// 订单号			String orderNo = commandRet.getParm("orderno").getStringColumn();			// OrderViewRS->Response->Order			Order order =  responseArry.addNewOrder();			OrderIDType orderID = order.addNewOrderID();			orderID.setStringValue(orderNo);			BookingReferenceType  brtArry = order.addNewBookingReferences().addNewBookingReference();			//支付时间(秒)			Table paysTabe = commandRet.getParm("pays").getTableColumn();			String maxpay = paysTabe.getRow(0).getColumn("maxpaysecond").getStringColumn();			int hour=(Integer.valueOf(maxpay)/(60*60));			int min=((Integer.valueOf(maxpay)/(60))-hour*60);			int s=(Integer.valueOf(maxpay)-hour*60*60-min*60);			maxpay=hour+"H"+min+"M"+s+"S";			order.addNewTimeLimits().addNewPaymentTimeLimit().setRefs(getList(maxpay));			//人航段信息			OrderItems OrderItemsArry = order.addNewOrderItems();			DataListType  dataListArry = responseArry.addNewDataLists();			FlightSegmentList flightArry = dataListArry.addNewFlightSegmentList();			//去程回程 关联航班信息			FlightList  flightListArry = dataListArry.addNewFlightList();			//航班查询的出发地			OriginDestinationList originArry = dataListArry.addNewOriginDestinationList();			//辅营与品牌关联			ListOfServiceBundleType listOfServiceBundleArry = dataListArry.addNewServiceBundleList();			//辅营信息			ServiceList serviceListA= dataListArry.addNewServiceList();			//航班信息			addSeats(commandRet,mapping);			addFlightList(mapping,flightArry,commandRet);			Map<String,List<Row>> submarketMap = new HashMap<String,List<Row>>();			addServiceList(commandRet,serviceListA,submarketMap);			addPaxflight(commandRet,OrderItemsArry,mapping,submarketMap);			addServiceBundleListArry(mapping,listOfServiceBundleArry);			addOriginArryArry(commandRet,flightListArry,originArry,mapping);			brtArry.setID(PNR);			brtArry.addNewAirlineID().setStringValue(CARRICD);		}		catch (Exception e) {			LOGGER.error(ErrCodeConstants.API_NULL_OFFERS, e);			doc = OrderViewRSDocument.Factory.newInstance();			root = doc.addNewOrderViewRS();			commandRet.setError(ErrCodeConstants.API_SYSTEM,					TipMessager.getMessage(ErrCodeConstants.API_SYSTEM,							ApiServletHolder.getApiContext().getLanguage()));			processError(commandRet, root);		}		return doc;	}		/**	 * 添加旅客信息到RS-XML	 * @param commandRet	 * @param passengersArry	 * @throws APIException	 */	private void addPaxsXML(CommandRet commandRet,Passengers  passengersArry,Mapping mapping) throws APIException{		//联系人		Table contactsTable = commandRet.getParm("contacts").getTableColumn();		//姓		String contactLastname = contactsTable.getRow(0).getColumn("name").getStringColumn();		//名		String contactFirstname = contactsTable.getRow(0).getColumn("firstname").getStringColumn();		//邮箱地址		String contactEmail = contactsTable.getRow(0).getColumn("email").getStringColumn();		//联系电话		String contactTelephone = contactsTable.getRow(0).getColumn("telephone").getStringColumn();		//区号//		String contactprefix = contactsTable.getRow(0).getColumn("contactprefix").getStringColumn();		Table paxsTable = commandRet.getParm("paxs").getTableColumn();		if (paxsTable == null || paxsTable.getRowCount() < 1) {			LOGGER.info(TipMessager.getInfoMessage(ErrCodeConstants.API_NULL_PAXS, language));			throw APIException.getInstance(ErrCodeConstants.API_NULL_PAXS);		}		Map<String,String> paxsMap = new  HashMap<String,String>();		int paxNum =1;		for (int i = 0; i < paxsTable.getRowCount(); i++) {			Row paxs = paxsTable.getRow(i);			//旅客id			String paxid = paxs.getColumn("id").getStringColumn();			//旅客类型			String paxtype = paxs.getColumn("paxtype").getStringColumn();			//陪护人			String guardian = paxs.getColumn("guardian").getStringColumn();			Passenger passengerArry = passengersArry.addNewPassenger();			passengerArry.setObjectKey("P"+paxNum);			mapping.getAllMap().put(paxid, "P"+paxNum);			paxs.addColumn(paxid, "P"+paxNum);			paxsMap.put(paxid, "P"+paxNum);			PTC ptcArry =passengerArry.addNewPTC();			ptcArry.setStringValue(paxtype);			//反向寻找婴儿的陪护人			if(!"".equals(guardian) && null !=guardian){				Passenger[]  passenger =passengersArry.getPassengerArray();				guardian = paxsMap.get(guardian);				for(Passenger pass:passenger){					String guardians = pass.getObjectKey();					if(null!=guardian&&guardian.equals(guardians)){						pass.setPassengerAssociation("P"+paxNum);						break;					}				}			}			//出生日期			Date birthDate = paxs.getColumn("birth").getDateColumn();			passengerArry.addNewAge().addNewBirthDate().setDateValue(birthDate);			//旅客姓名			Name nameArry = passengerArry.addNewName();			String lastname = paxs.getColumn("lastname").getStringColumn();			String firstname = paxs.getColumn("firstname").getStringColumn();			nameArry.addNewSurname().setStringValue(lastname);			nameArry.addNewGiven().setStringValue(firstname);			Contacts  contactsArry = passengerArry.addNewContacts();			Contact contactArry1 = contactsArry.addNewContact();			contactArry1.addNewContactType().setStringValue("PASSENGER");			org.iata.iata.edist.PhoneType.Number numberArry1 = contactArry1.addNewPhoneContact().addNewNumber();			numberArry1.setAreaCode(contactsMap.get(AREACODE));			numberArry1.setStringValue(contactTelephone);			contactArry1.addNewEmailContact().addNewAddress().setStringValue(contactEmail);			/*联系人信息*****************************************************************/			if (i==0) {				Contact contactArry2 = contactsArry.addNewContact();				contactArry2.addNewContactType().setStringValue("CONTACT");				org.iata.iata.edist.PhoneType.Number numberArry = contactArry2.addNewPhoneContact().addNewNumber();				numberArry.setAreaCode(contactsMap.get(AREACODE));;				numberArry.setStringValue(contactTelephone);				OtherContactMethodType ocmArry = contactArry2.addNewOtherContactMethod();				ocmArry.setName(contactLastname);				if(StringUtils.hasLength(contactFirstname)){					ocmArry.setValue(contactFirstname);				}				contactArry2.addNewEmailContact().addNewAddress().setStringValue(contactEmail);			}			/********************************************************************/			//旅客性别 Male/Female			String paxsex = paxs.getColumn("paxsex").getStringColumn();			paxsex = "M".equals(paxsex)?"Male":"Female";			passengerArry.addNewGender().setStringValue(paxsex);			//旅客证件信息			FOID fpidArry = passengerArry.addNewPassengerIDInfo().addNewFOID();			String passtype = paxs.getColumn("passtype").getStringColumn();			String passno = paxs.getColumn("passno").getStringColumn();			fpidArry.setType(passtype);			fpidArry.addNewID().setStringValue(passno);			paxNum++;		}	}			/**	 * 将航班信息放入RS-XML	 * @param mapping	 * @param flightArry	 * @throws ParseException 	 */	private void addFlightList(Mapping mapping,FlightSegmentList flightArry,CommandRet commandRet) throws ParseException{		Table flightsTable = commandRet.getParm("flights").getTableColumn();		Map<String,Row> flightsMap = new HashMap<String,Row>();		int seg =1;		for(Row flights:flightsTable){			String flightid = flights.getColumn("id").getStringColumn();			//航班编号			String flightno = flights.getColumn("flightno").getStringColumn();			String segFlightno = SEG+seg;			seg =seg+1;			flights.addColumn(SEG,segFlightno);			mapping.getAllMap().put(flightno, segFlightno);			flightsMap.put(flightid, flights);			ListOfFlightSegmentType fsArry = flightArry.addNewFlightSegment();			fsArry.setSegmentKey(segFlightno);			Departure DepartureArry = fsArry.addNewDeparture();			//出发地三字码			String oricode = flights.getColumn("oricode").getStringColumn();			//出发时间			String oriDay = flights.getColumn("oriDay").getStringColumn();			if(oriDay != null && !"".equals(oriDay)){				Calendar oridate = DateUtils.getInstance().parseDate(oriDay, "yyyyMMdd");				// 出发时间				String oriTime = flights.getColumn("oriTime").getStringColumn();				DepartureArry.addNewAirportCode().setStringValue(oricode);				if (oridate != null) {					DepartureArry.setDate(oridate);					DepartureArry.setTime(oriTime);				}			}			FlightArrivalType ftArry = fsArry.addNewArrival();			//到达地三字码			String destcode = flights.getColumn("destcode").getStringColumn();			//到达时间			String destDateTime = flights.getColumn("destDateTime").getStringColumn();			if(destDateTime != null && !"".equals(destDateTime) && destDateTime.length() >= 10 ){				destDateTime = destDateTime.substring(0, 10);				Calendar destDate = DateUtils.getInstance().parseDate(destDateTime, "yyyy-MM-dd");				ftArry.addNewAirportCode().setStringValue(destcode);				ftArry.setDate(destDate);				//到达时间				String destTime = flights.getColumn("destTime").getStringColumn();				ftArry.setTime(destTime);			}			MarketingCarrierFlightType mcfArry = fsArry.addNewMarketingCarrier();			//承运航编号			String carricd = flights.getColumn("airlinecd").getStringColumn();			CARRICD = carricd;			mcfArry.addNewAirlineID().setStringValue(carricd);			FlightNumber flightNumberArry = mcfArry.addNewFlightNumber();			if (flightno.substring(flightno.length()-1).matches("[A-Z]")) {				//航班后缀				flightNumberArry.setOperationalSuffix(flightno.substring(flightno.length()-1));				flightNumberArry.setStringValue(flightno.substring(0, flightno.length()-1));			} else {				flightNumberArry.setOperationalSuffix("");				flightNumberArry.setStringValue(flightno);			}			//舱位			String cabin = flights.getColumn("cabin").getStringColumn();			mcfArry.setResBookDesigCode(cabin);			//机型			String carriflightno = flights.getColumn("planestype").getStringColumn();			fsArry.addNewEquipment().addNewAircraftCode().setStringValue(carriflightno);		}		mapping.setFlightsMap(flightsMap);	}		/**	 * 添加辅营信息RS-xml	 * @param commandRet	 * @param eatList	 */	@SuppressWarnings("deprecation")	private void addServiceList(CommandRet commandRet,ServiceList serviceListArry,Map<String,List<Row>> subMap){		Table submarketsTable = commandRet.getParm("submarkets").getTableColumn();		Set<String> submarketcodeSet = new HashSet<>();		for(Row submarkets:submarketsTable){			//辅营代码			String submarketcode = submarkets.getColumn("submarketcode").getStringColumn();			if(!submarketcodeSet.contains(submarketcode)){				submarketcodeSet.add(submarketcode);				//辅营类型				String submarkettype = submarkets.getColumn("submarkettype").getStringColumn();				//辅营名称				String submarketname = "";				if(submarkets.getColumn("submarketname").getObjectColumn() != null){					submarketname = StatusUtil.getLanguageName(submarkets.getColumn("submarketname").getObjectColumn(),language);				}else{					submarketname = submarkets.getColumn("submarketname").getStringColumn();				}				//辅营描述				String submarketdesc = submarkets.getColumn("submarketdesc").getStringColumn();				String isfree = submarkets.getColumn("isfree").getStringColumn();				String currencyCode = submarkets.getColumn("currencySign").getStringColumn();				BigDecimal price = submarkets.getColumn("unitprice").getBigDecimalColumn();				ServiceDetailType serviceArry = serviceListArry.addNewService();				serviceArry.addNewServiceID().setStringValue(submarketcode);				serviceArry.addNewName().setStringValue(submarketname);				serviceArry.addNewEncoding().addNewCode().setStringValue(submarkettype);				serviceArry.addNewFeeMethod().setStringValue(isfree);				serviceArry.addNewDescriptions().addNewDescription().addNewText().setStringValue(submarketdesc);				CurrencyAmountOptType  priceArry = serviceArry.addNewPrice().addNewTotal();				priceArry.setCode(currencyCode);				priceArry.setBigDecimalValue(price);				serviceArry.addNewBookingInstructions().addNewSSRCode().setStringValue(submarketcode);				//旅客id				String paxid = submarkets.getColumn("paxid").getStringColumn();				serSubmarketsMap(paxid, submarkets, subMap);			}		}	}		/**	 * 设置旅客与辅营的关联关系	 * @param paxid	 * @param submarketid	 * @param subMap	 */	public void serSubmarketsMap(String paxid,Row submarkets,Map<String,List<Row>> subMap){		List<Row> submarketList = subMap.get(paxid);		if(null == submarketList){			submarketList = new ArrayList<Row>();		}		submarketList.add(submarkets);		subMap.put(paxid, submarketList);	}		/**	 * 	 * @param commandRet	 * @param OrderItemsArry	 * @param mapping	 * @throws ParseException 	 */	private void addPaxflight(CommandRet commandRet,OrderItems OrderItemsArry,Mapping mapping,			Map<String,List<Row>> submarketMap ) throws ParseException{		Table paxflights = commandRet.getParm("paxflights").getTableColumn();		int flt =1;		for(Row paxflight:paxflights){			PNR = paxflight.getColumn("pnr").getStringColumn();			//航段id			String id = paxflight.getColumn("id").getStringColumn();			//航班id			String flightid = paxflight.getColumn("flightid").getStringColumn();			//航班数据			Row flights = mapping.getFlightsMap().get(flightid);			OrderItem  orderItemArry =	OrderItemsArry.addNewOrderItem();			ItemIDType ItemIDArry = orderItemArry.addNewOrderItemID();			//销售航司二字码			String airlinecd = flights.getColumn("airlinecd").getStringColumn();			ItemIDArry.setOwner(airlinecd);			ItemIDArry.setStringValue(id);			Row Seats = mapping.getSeatsMap().get(flightid);			if(null!=Seats){				String price  = Seats.getColumn("price").getStringColumn();				String currencyCode  = Seats.getColumn("currencyCode").getStringColumn();				String seatno  = Seats.getColumn("seatno").getStringColumn();				SeatItem seatItemArry = orderItemArry.addNewSeatItem();				CurrencyAmountOptType  totalArry = seatItemArry.addNewPrice().addNewTotal();				totalArry.setCode(currencyCode);				totalArry.setStringValue(price);				String column =seatno.substring(seatno.length()-1,seatno.length());				String number =seatno.substring(seatno.length()-1);				SeatLocationType locArry =seatItemArry.addNewLocation();				locArry.setColumn(column);				locArry.addNewRow().addNewNumber().setStringValue(number);			}			//去程信息			Flight flightArry = orderItemArry.addNewFlightItem().addNewOriginDestination().addNewFlight();			//航班号			String flightno = flights.getColumn("flightno").getStringColumn();			flightArry.setRefs(getList(mapping.getAllMap().get(flightno)));			flt =flt+1;			Departure departureArry = flightArry.addNewDeparture();			//出发机场三字码			String oricode = flights.getColumn("oricode").getStringColumn();			departureArry.addNewAirportCode().setStringValue(oricode);			//出发时间			String oriDay = flights.getColumn("oriDay").getStringColumn();			if(oriDay != null && !"".equals(oriDay)){				Calendar oridate = DateUtils.getInstance().parseDate(oriDay, "yyyyMMdd");				if (oridate != null) {					departureArry.setDate(oridate);				}			}			//到达机场三字码			String destcode = flights.getColumn("destcode").getStringColumn();			flightArry.addNewArrival().addNewAirportCode().setStringValue(destcode);			MarketingCarrierFlightType mcfArry = flightArry.addNewMarketingCarrier();			//承运航司二字码			/*String carricd = flights.getColumn("carricd").getStringColumn();*/			//承运航班号			/*String carriflightno = flights.getColumn("carriflightno").getStringColumn();*/			mcfArry.addNewAirlineID().setStringValue(airlinecd);			FlightNumber fnArry = mcfArry.addNewFlightNumber();			if (flightno.substring(flightno.length()-1).matches("[A-Z]")) {				//航班后缀				fnArry.setOperationalSuffix(flightno.substring(flightno.length()-1));				fnArry.setStringValue(flightno.substring(0,flightno.length()-1));			} else {				fnArry.setOperationalSuffix("");				fnArry.setStringValue(flightno);			}			//旅客与辅营关联数据			//旅客id			String paxid = paxflight.getColumn("paxid").getStringColumn();			String paxNum = mapping.getAllMap().get(paxid);			List<Row> submarketList =submarketMap.get(paxid);			org.iata.iata.edist.OrderItemCoreType.OrderItem.Associations assArry = orderItemArry.addNewAssociations();			org.iata.iata.edist.BaggageItemType.Services  baggageArry =  orderItemArry.addNewBaggageItem().addNewServices();			org.iata.iata.edist.OtherItemType.Services  otherArry = orderItemArry.addNewOtherItem().addNewServices();			//旅客编号			assArry.addNewPassengers().setPassengerReferences(getList(paxNum));			String ids ="";			if(submarketList != null && submarketList.size() > 0){				for(Row  submarkets:submarketList){					String isfree =	submarkets.getColumn("isfree").getStringColumn();					String submarkettype = submarkets.getColumn("submarkettype").getStringColumn();					String submarketid = submarkets.getColumn("submarketcode").getStringColumn();					if("Y".equals(isfree)){						ids=submarketid+" "+ids;					}else{						if("BAG".equals(submarkettype)){							baggageArry.addNewServiceID().setStringValue(submarketid);						}else{							otherArry.addNewServiceID().setStringValue(submarketid);						}					}									}				mapping.getServiceBundleMap().put(id, ids);				assArry.addNewIncludedService().setBundleReference(id);			}		}	}		/**	 * 辅营与品牌关联的节点	 * @param listOfServiceBundleArry	 */	public void addServiceBundleListArry(Mapping mapping,ListOfServiceBundleType listOfServiceBundleArry){		Map<String ,String> ServiceBundleMap= mapping.getServiceBundleMap();		for(Entry<String,String> freeEntry :ServiceBundleMap.entrySet()){			//辅营id			String submarketid =freeEntry.getValue().trim();			if(!"".equals(submarketid) && null != submarketid ){				ServiceBundle serviceBundleArry = listOfServiceBundleArry.addNewServiceBundle();				String[] submarketidS = submarketid.split(" ");				//商品 id				String brandid = freeEntry.getKey();				serviceBundleArry.setListKey(brandid);				serviceBundleArry.setItemCount(BigInteger.valueOf(submarketidS.length));				org.iata.iata.edist.ListOfServiceBundleType.ServiceBundle.Associations associationsArry = serviceBundleArry.addNewAssociations();				for(String id:submarketidS){					associationsArry.addNewServiceReference().setStringValue(id);				}			}		}	}		/**	 * 航班于OD关联	 * @param commandRet	 * @param flightListArry	 * @param originArry	 */	public void  addOriginArryArry(CommandRet commandRet ,FlightList flightListArry,OriginDestinationList originArry,Mapping mapping){		Table flightsTable = commandRet.getParm("flights").getTableColumn();		String oricode ="";		String destcode ="";		String routtypeS ="";		String routtypeR ="";		int flt =1;		for(Row flights:flightsTable){			org.iata.iata.edist.DataListType.FlightList.Flight  flightArry = flightListArry.addNewFlight();			//出发地三字码			 oricode = flights.getColumn("oricode").getStringColumn();			//到达地三字码			 destcode = flights.getColumn("destcode").getStringColumn();			//航班编号			String flightno = flights.getColumn("flightno").getStringColumn();			String routtype = flights.getColumn("routtype").getStringColumn();			flightArry.setFlightKey(FLT+flt);			flightArry.addNewSegmentReferences().setStringValue(mapping.getAllMap().get(flightno));			if("G".equals(routtype)){				routtypeS =FLT+flt+" "+routtypeS;			}else{				routtypeR =FLT+flt+" "+routtypeR;			}			flt=flt+1;		}		if("".equals(routtypeR)){			OriginDestination  originDestinationArry = originArry.addNewOriginDestination();			originDestinationArry.addNewDepartureCode().setStringValue(oricode);			originDestinationArry.addNewArrivalCode().setStringValue(destcode);			originDestinationArry.addNewFlightReferences().setStringValue(routtypeS.trim());		}else{			OriginDestination  originDestinationArry1 = originArry.addNewOriginDestination();			originDestinationArry1.addNewDepartureCode().setStringValue(oricode);			originDestinationArry1.addNewArrivalCode().setStringValue(destcode);			originDestinationArry1.addNewFlightReferences().setStringValue(routtypeS.trim());			OriginDestination  originDestinationArry2 = originArry.addNewOriginDestination();			originDestinationArry2.addNewDepartureCode().setStringValue(destcode);			originDestinationArry2.addNewArrivalCode().setStringValue(oricode);			originDestinationArry2.addNewFlightReferences().setStringValue(routtypeR.trim());		}	}		public void  addSeats(CommandRet commandRet,Mapping mapping){		Table seatsTable = commandRet.getParm("seats").getTableColumn();		if(null !=seatsTable){			for(Row seats:seatsTable){				mapping.getSeatsMap().put(seats.getColumn("flightid").getStringColumn(), seats);			}		}	}		/**	 * 处理错误,如果包括错误,返回true,否则返回false	 * @param ret	 * @param root	 * @return	 */	private boolean processError(CommandRet ret, OrderViewRS root) {		// 判断是否存在错误信息		String errCode = ret.getErrorCode();		// 存在错误信息		if (StringUtils.hasLength(errCode)) {			ErrorType error = root.addNewErrors().addNewError();			error.setCode(TipMessager.getErrorCode(errCode));			// 错误描述			error.setShortText(TipMessager.getMessage(errCode,					ApiServletHolder.getApiContext().getLanguage()));			return true;		}		return false;	}		/**	 * 根据Java编程规范：由于for循环中不能创建对象，所有将创建对象放到方法里	 *	 * @return list	 */	public List<String > getList(String args) {		List<String> list = new ArrayList<String>();		list.add(args);		return list;	}		private static final class Mapping {		private Map<String, String> allMap = new HashMap<String, String>();		private Map<String, Row> flightsMap;		/**		 * 辅营信息		 * String 免费服务 id		 * Row 服务内容		 */		private  Map<String,String>  ServiceBundleMap=new HashMap<String, String>();				private  Map<String,Row>  SeatsMap = new HashMap<String, Row>();				public Map<String, Row> getFlightsMap() {			return flightsMap;		}		public void setFlightsMap(Map<String, Row> flightsMap) {			this.flightsMap = flightsMap;		}		public Map<String,String> getServiceBundleMap() {			return ServiceBundleMap;		}		public Map<String,Row> getSeatsMap() {			return SeatsMap;		}		public Map<String, String> getAllMap() {			return allMap;		}	}}